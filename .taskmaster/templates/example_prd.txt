<context>
# Overview  
Riot API gives LOL data. Gemini (and other LLMs) can analize data and give feed back to a player (user). My team is working on 
building a webservice, that helps player review his play after a game, and grow their game skills and level up their tier. 
A user logs in and can see the past reviews. and can ask for a new analytics. each anlaytics spits out a short reviews in 
2-3 tweet lengths.



# Core Features  
[List and describe the main features of your product. For each feature, include:
- What it does
- Why it's important
- How it works at a high level]
[request new game analytics]
a user pics a champion, and inputs summoner name, and selcts tag to specify a user puuid.
and then a user is prompt to select a match that user has played. the match is listed from latest to old, 
these are all the user inputs.
Using Riot API, the backend requests for specified play data. and saves it to DB. 
And then, backend sends this to Gemini (LLM) and request for play review - analize Strength and weakness and spits out 
final report in 3-tweet length. and saves it to DB and shows it in Frontend.

[see the reviews]
so the game review reports will be stacked to DB. A user can see the saved reports of the DB. this does not have to be credential
since riot api gives all play data for all gamers.

# User Experience  
[Describe the user journey and experience. Include:
- User personas
- Key user flows
- UI/UX considerations]
[simple fast report]
- Gamers in their 20-30s who are very eager to level up their play skills and tiers.
- Even without login, just being Guest mode, can ask for a play analytics. 
- If logs in, he can have mypage and all the reports he made is listed here.
- Also the logged in user can see the total game anlaytics reports stacked in DB.


</context>
<PRD>
# Technical Architecture  
[Outline the technical implementation details:
- System components
- Data models
- APIs and integrations
- Infrastructure requirements]

- Java Spring Web, Remix Typescript Frontend
- Postgre SQL, JPA, Docker for DB 
- Riot API for retrieving Game Data, Gemini API for review and generate report.
- Multiple Signup , Login methods includeing Clerk, Local, and more (NAVER) but Clerk is most important
- up untill now, currently we built the User , Auth part backend , and also frontend is Clerk embedded. 
Not those two linked. So it should be linked as per the Clerk guide. 

# Development Roadmap  
[Break down the development process into phases:
- MVP requirements
- Future enhancements
- Do not think about timelines whatsoever -- all that matters is scope and detailing exactly what needs to be build in each phase so it can later be cut up into tasks
]

- prepare Champions DB from Riot, since the number of Champions are fixed for some period of time
- prepare puuid DB containing tag, summoner_name and later make this a batch job
- aquires game data as user likes
- get anlaytics from AI (Gemini, LLM) about this

# Logical Dependency Chain
[Define the logical order of development:
- Which features need to be built first (foundation)
- Getting as quickly as possible to something usable/visible front end that works
- Properly pacing and scoping each feature so it is atomic but can also be built upon and improved as development approaches]
- User Login, get User data
- get Champion DB and puuid DB
- save targeted game data
- send it / recieve game data

# Risks and Mitigations  
[Identify potential risks and how they'll be addressed:
- Technical challenges
- Figuring out the MVP that we can build upon
- Resource constraints]

# Appendix  
[Include any additional information:
- Research findings
- Technical specifications]
</PRD>